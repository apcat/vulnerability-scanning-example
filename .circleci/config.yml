version: 2.1

executors:
  default:
    working_directory: /tmp/project
    docker:
      - image: cimg/go:1.16
        user: root
        environment:
          TZ: "Asia/Tokyo"
  trivy:
    working_directory: /tmp/project
    docker:
      - image: aquasec/trivy
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
  dependabot:
    working_directory: /tmp/project
    docker:
      - image: ghcr.io/apcat/dependabot-script
    environment:
      REPO_CONTENTS_PATH: /tmp/project
      PACKAGE_MANAGER: go_modules
      PROJECT_PATH: apcat/vulnerability-scanning-example

orbs:
  go: circleci/go@1.7.0
  slack: circleci/slack@4.4.2

jobs:
  build:
    executor: default
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Build
          command: go build -o ./build/vulnerability-scanning-example .
      - persist_to_workspace:
          root: /tmp/project
          paths:
            - "*"

  vulnerability_scan:
    executor: trivy
    steps:
      - attach_workspace:
          at: /tmp/project
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add jq
      - run:
          name: Trivy
          environment:
            TRIVY_NEW_JSON_SCHEMA: "true" # cf. https://github.com/aquasecurity/trivy/discussions/1050
          command: |
            result=0
            trivy fs -f json -s "HIGH,CRITICAL" --ignore-unfixed -o trivy.json --exit-code 1 ./build || result=$?
            if [ $result -eq 1 ]; then
              jq -r '[.Results[] | select(.Type == "gobinary") | .Vulnerabilities[].PkgName] | unique | .[]' trivy.json > go_modules.log
              trivy fs -f template -t "$(cat trivy/slack.tpl)" -s "HIGH,CRITICAL" --ignore-unfixed -o trivy_slack.json ./build
            fi
      - persist_to_workspace:
          root: /tmp/project
          paths:
            - go_modules.log
            - trivy_slack.json

  update_dependencies:
    executor: dependabot
    steps:
      - attach_workspace:
          at: /tmp/project
      - run:
          name: Execute dependabot script
          command: |
            cd /home/dependabot/dependabot-script
            if [ -f /tmp/project/go_modules.log ]; then
              DEPENDENCIES="$(echo -n "$(cat /tmp/project/go_modules.log)" | tr "\n" ",")" \
                bundle exec ruby ./generic-update-script.rb
            fi

  notify_slack:
    executor: default
    steps:
      - attach_workspace:
          at: /tmp/project
      - run:
          name: Set $SLACK_TEMPLATE
          command: |
            if [ -f trivy_slack.json ]; then
              echo "export SLACK_TEMPLATE='$(cat trivy_slack.json | jq -c '.')'" >> $BASH_ENV
              echo "Vulnerable dependencies detected! Please check the slack channel for details."
              exit 1
            fi
      - slack/notify:
          event: fail
          template: SLACK_TEMPLATE

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - vulnerability_scan:
          requires:
            - build
      - notify_slack:
          requires:
            - vulnerability_scan

  scheduled_vulnerability_scan:
    triggers:
      - schedule:
          cron: "0 1 * * 1,2,3,4,5" # 月-金 10:00 JST
          filters:
            branches:
              only: master
    jobs:
      - build
      - vulnerability_scan:
          requires:
            - build
      - update_dependencies:
          requires:
            - vulnerability_scan
      - notify_slack:
          requires:
            - update_dependencies
